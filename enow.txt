
Book
  validation
    should fail without title

Genre
  validations
    is invalid without name

Book
  GET /books
    returns http status of success
    returns content_type of json
    returns the expected number of books (FAILED - 1)
  GET /books?rating=5 (filter by rating)
    returns http status of success
    returns content_type of json
    returns the expected number of books
  GET /books/finished
    returns http status of success (PENDING: Temporarily skipped with xit)
    returns content_type of json (PENDING: Temporarily skipped with xit)
    returns the expected number of books (PENDING: Temporarily skipped with xit)
  using valid data
    returns http status of created
    returns created book as json
    returns the last book created (FAILED - 2)
    returns the books collection incremented by one
  GET /book/id
    returns http status of success
    returns selected book as json
    returns only selected book (FAILED - 3)
    returns the genre of the selected book (FAILED - 4)
  PATCH /book/id
    returns http status of no_content
  DELETE /book/id
    returns http status of no_content

Genre
  GET /genres
    returns collection of genres
      returns http status of success
      returns collection of genres as json
      returns the expected number of books (FAILED - 5)
    returns a selected genre based on id
      returns http status of success
      returns selected genre as json
      returns selected genre (FAILED - 6)
  POST /genres
    with valid params
      returns http status of created
      returns the created genre in json
      created the genre with the given parameters (FAILED - 7)
  PATCH /genre/id
    returns http status of success
    returns the updated genre in json
    updated the selected genre (FAILED - 8)
  DELETE /genre/id
    returns http status of no_content
    returns book(children) count of zero

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) Book GET /books/finished returns http status of success
     # Temporarily skipped with xit
     # ./spec/requests/books_spec.rb:55

  2) Book GET /books/finished returns content_type of json
     # Temporarily skipped with xit
     # ./spec/requests/books_spec.rb:59

  3) Book GET /books/finished returns the expected number of books
     # Temporarily skipped with xit
     # ./spec/requests/books_spec.rb:63

Failures:

  1) Book GET /books returns the expected number of books
     Failure/Error: expect(JSON.parse(response.body).size).to eq(Book.count)

       expected: 4
            got: 1

       (compared using ==)
     # ./spec/requests/books_spec.rb:31:in `block (3 levels) in <main>'

  2) Book using valid data returns the last book created
     Failure/Error: expect(JSON.parse(response.body)["id"]).to eq(Book.last.id)

       expected: 175
            got: nil

       (compared using ==)
     # ./spec/requests/books_spec.rb:84:in `block (3 levels) in <main>'

  3) Book GET /book/id returns only selected book
     Failure/Error: expect(JSON.parse(response.body)["id"]).to eq(@first_book.id)

       expected: 169
            got: nil

       (compared using ==)
     # ./spec/requests/books_spec.rb:108:in `block (3 levels) in <main>'

  4) Book GET /book/id returns the genre of the selected book
     Failure/Error: expect(JSON.parse(response.body)["genre_id"]).to eq(@first_genre.id)

       expected: 195
            got: nil

       (compared using ==)
     # ./spec/requests/books_spec.rb:112:in `block (3 levels) in <main>'

  5) Genre GET /genres returns collection of genres returns the expected number of books
     Failure/Error: expect(JSON.parse(response.body).size).to eq(Genre.all.count)

       expected: 4
            got: 1

       (compared using ==)
     # ./spec/requests/genres_spec.rb:21:in `block (4 levels) in <main>'

  6) Genre GET /genres returns a selected genre based on id returns selected genre
     Failure/Error: expect(JSON.parse(response.body)["name"]).to eq('Fiction')

       expected: "Fiction"
            got: nil

       (compared using ==)
     # ./spec/requests/genres_spec.rb:37:in `block (4 levels) in <main>'

  7) Genre POST /genres with valid params created the genre with the given parameters
     Failure/Error: expect(JSON.parse(response.body)["name"]).to eq('Fiction')

       expected: "Fiction"
            got: nil

       (compared using ==)
     # ./spec/requests/genres_spec.rb:57:in `block (4 levels) in <main>'

  8) Genre PATCH /genre/id updated the selected genre
     Failure/Error: expect(JSON.parse(response.body)["name"]).to eq('Non-Fiction')

       expected: "Non-Fiction"
            got: nil

       (compared using ==)
     # ./spec/requests/genres_spec.rb:77:in `block (3 levels) in <main>'

Finished in 1.1 seconds (files took 0.70785 seconds to load)
35 examples, 8 failures, 3 pending

Failed examples:

rspec ./spec/requests/books_spec.rb:30 # Book GET /books returns the expected number of books
rspec ./spec/requests/books_spec.rb:83 # Book using valid data returns the last book created
rspec ./spec/requests/books_spec.rb:107 # Book GET /book/id returns only selected book
rspec ./spec/requests/books_spec.rb:111 # Book GET /book/id returns the genre of the selected book
rspec ./spec/requests/genres_spec.rb:20 # Genre GET /genres returns collection of genres returns the expected number of books
rspec ./spec/requests/genres_spec.rb:36 # Genre GET /genres returns a selected genre based on id returns selected genre
rspec ./spec/requests/genres_spec.rb:56 # Genre POST /genres with valid params created the genre with the given parameters
rspec ./spec/requests/genres_spec.rb:76 # Genre PATCH /genre/id updated the selected genre

